---
- name: Pre-reqs for ansible to run
  hosts: all
  gather_facts: false
  become: yes
  pre_tasks:
    - raw:  test -e /usr/bin/python || ( dnf clean packages && dnf install -y *libselinux* && dnf install -y zip)

- name: Build Tableau Linux Server
  hosts: all
  become: true
  tasks:

  - name: Set timezone to Europe/London
    timezone:
      name: Europe/London

  - name: enable rc.local service
    shell:
       systemctl enable rc-local.service && systemctl start rc-local.service

  - name: GET Tableau files from DQ-config-bucket
    shell: |
      /usr/local/bin/aws s3 cp s3://dq-config-bucket/dq-tableau-linux/gold-master /tmp/install --recursive
      ln -s -f /usr/bin/python3 /usr/bin/python

  - name: DNF Update
    shell: |
       sed -i 's/REGION/eu-west-2/' /etc/yum.repos.d/redhat-rhui*.repo
       sed -i 's/sslverify=1/sslverify=0/' /etc/yum.repos.d/redhat-rhui*.repo
       dnf clean all && rm -r /var/cache/dnf 
       sed -i '2s/.*/enabled=0/' /etc/yum/pluginconf.d/subscription-manager.conf
       dnf update -y
    become: true

  - name: Add repositories from centos appstream
    yum_repository:
      name: centos8-mirror 
      description: Repo from centos appstream
      baseurl: http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os/
      gpgcheck: no
    become: true

  - name: DNF Install other packages (Tableau stuff from config_bucket)
    dnf:
      name:
        - /tmp/install/tableau-tabcmd-gold-master.noarch.rpm
    vars:
      ansible_python_interpreter: "/usr/libexec/platform-python"   

  - name: DNF Install specifically tableau server 
    dnf:
      name:
        - /tmp/install/tableau-server-gold-master.x86_64.rpm

  - name: Install the Postgresql & Athena JDBC Driver
    shell: |
      mkdir -p /opt/tableau/tableau_driver/jdbc
      cp /tmp/install/AthenaJDBC42.jar /opt/tableau/tableau_driver/jdbc/AthenaJDBC42.jar
      cp /tmp/install/postgresql-42.2.14.jar /opt/tableau/tableau_driver/jdbc/postgresql-42.2.14.jar
      chmod 755 /opt/tableau/tableau_driver/jdbc/postgresql-42.2.14.jar
      chmod 755 /opt/tableau/tableau_driver/jdbc/AthenaJDBC42.jar
    become: true

  #- name: Download cloudwatch logs agent
  #  get_url:
  #    url: https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
  #    dest: /tmp/awslogs-agent-setup.py
  #    mode: "+x"

  - name: GET Cloudwatch logs config from DQ-config-bucket
    shell: |
       /usr/local/bin/aws s3 cp s3://dq-config-bucket/dq-tableau-linux/cwlogs.conf /tmp
       /usr/local/bin/aws s3 cp s3://dq-config-bucket/dq-tableau-linux/awslogs-agent-setup.py /tmp
       chmod u+x /tmp/awslogs-agent-setup.py

  - name: Install cloudwatch log agent
    environment:
      LC_ALL: C
    shell: /tmp/awslogs-agent-setup.py --region eu-west-2 --non-interactive -c /tmp/cwlogs.conf
    args:
      creates: /var/awslogs/etc/aws.conf

  - name: Copy cloudwatch logs starter
    copy:
      src: scripts/startcloudwatchlogs.sh
      dest: /usr/bin/startcloudwatchlogs.sh
      owner: root
      group: root
      mode: 0755

  - name: Make Cron Job to start awslogs with right region
    cron:
      name: Start awslogs
      special_time: reboot
      job: /usr/bin/startcloudwatchlogs.sh

  - name: Download cloudwatch agent (for ec2 alarms)
    get_url:
      url: https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm
      dest: /tmp/amazon-cloudwatch-agent.rpm
      mode: "+x"

  - name: Install cloudwatch agent (for ec2 alarms)
    dnf:
      name: /tmp/amazon-cloudwatch-agent.rpm
      state: present

  - name: Cloudwatch Agent config
    copy:
      dest: /opt/aws/amazon-cloudwatch-agent/bin/config.json
      content: |
                {
                "agent": {
                        "metrics_collection_interval": 60,
                        "run_as_user": "ec2-user"
                },
                "metrics": {
                        "namespace": "CWAgent",
                        "append_dimensions": {
                                "InstanceId": "${aws:InstanceId}"
                        },
                        "metrics_collected": {
                                "disk": {
                                        "measurement": [
                                                "used_percent"
                                        ],
                                        "metrics_collection_interval": 60,
                                        "resources": [
                                                "*"
                                        ],
                                        "ignore_file_system_types": [
                                                "devtmpfs",
                                                "tmpfs"
                                        ],
                                        "drop_device": true
                                },
                                "diskio": {
                                        "measurement": [
                                                "io_time"
                                        ],
                                        "metrics_collection_interval": 60,
                                        "resources": [
                                                "*"
                                        ]
                                },
                                "mem": {
                                        "measurement": [
                                                "mem_used_percent",
                                                "mem_available_percent",
                                                "mem_used",
                                                "mem_cached",
                                                "mem_total"
                                        ],
                                        "metrics_collection_interval": 60
                                },
                                "swap": {
                                  "measurement": [
                                          "swap_used_percent"
                                  ],
                                  "metrics_collection_interval": 60
                                        }
                                }
                        }
                }

  - name: Cloudwatch logs config
    copy:
      dest: /tmp/cwlogs.conf
      content: |
        [general]
        state_file = /var/awslogs/state/agent-state
        [/var/log/messages]
        file = /var/log/messages
        log_group_name = /TABLEAU/messages
        log_stream_name = {instance_id}
        datetime_format = %b %d %H:%M:%S
        [/TABLEAU/cloud-init]
        file = /var/log/cloud-init.log
        log_group_name = /TABLEAU/cloud-init
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f
        [/TABLEAU/cloud-init/output]
        file = /var/log/cloud-init-output.log
        log_group_name = /TABLEAU/cloud-init/output
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f
        [/TABLEAU/cron]
        file = /var/log/cron
        log_group_name = /TABLEAU/cron
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f
        [/TABLEAU/secure]
        file = /var/log/secure
        log_group_name = /TABLEAU/secure
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f
        [/TABLEAU/yum]
        file = /var/log/dnf.rpm.log
        log_group_name = /TABLEAU/yum
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f
        [/TABLEAU/syslog]
        file = /var/log/syslog
        log_group_name = /TABLEAU/syslog
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f

  - name: Set DNS Resolver Options
    blockinfile:
      path: /etc/sysconfig/network
      block: |
        RES_OPTIONS="rotate timeout:1 attempts:1"

  - name: DNF ReInstall Tableau server packages
    dnf:
      name:
        - /tmp/install/tableau-server-gold-master.x86_64.rpm

  - name: Configure permissions for tableau_srv user
    shell: |
       touch /var/log/user-data.log && chown tableau_srv:tableau_srv /var/log/user-data.log
       chown -R tableau_srv:tableau_srv /opt/tableau

  - name: Secure sshd_config
    lineinfile: dest=/etc/ssh/sshd_config
                regexp="^PermitRootLogin"
                line="PermitRootLogin no"
                state=present
  - lineinfile: dest=/etc/ssh/sshd_config
                regexp="^PasswordAuthentication"
                line="PasswordAuthentication no"
                state=present
  - lineinfile: dest=/etc/ssh/sshd_config
                regexp="^X11Forwarding"
                line="X11Forwarding no"
                state=present
